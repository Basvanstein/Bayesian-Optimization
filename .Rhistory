library(lazyeval)
normalize.min_max <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
df.agg <- table %>%
select(-ZeitP, -cylinder_label, -date, -month, -matches('^Zyl')) %>%
mutate_(.dots = setNames(lapply(colnames(.[, -1]), . %>% {interp(~normalize.min_max(x), x = as.name(.))}), colnames(.[, -1]))) %>%
group_by(cylinder_ID) %>%
summarise_(.dots = paste0('mean(', colnames(.[, -1]), ')')) %>%
melt(id = 'cylinder_ID')
p <- ggplot(df.agg) +
geom_line(aes(variable, value, group = cylinder_ID, colour = cylinder_ID)) +
geom_segment(data = select(df.agg, variable) %>% unique,
aes(x = match(variable, levels(variable)),
xend = match(variable, levels(variable)),
y = 1, yend = 0), colour = 'black', size = 0.5)
p
gg_beanplot <- function(mapping, data, fill = 'grey', colour = 'grey', alpha = 1,
kernel = 'gaussian', bw = 'SJ', draw_quantiles = NULL,
trim = TRUE, na.rm = FALSE, show.legend = NA) {
x <- as.character(mapping$x)
y <- as.character(mapping$y)
df <- data[, c(x, y)] %>%
group_by_(.dots = c(x, y)) %>%
rename_(.dots = c('x' = x, 'y' = y)) %>%
mutate(count = 0.9 / (1 + exp(log(2) + 1 - n()))) # calculate the width of
# each segment
ggplot() +
geom_violin(data = data, mapping = mapping, fill = fill, trim = trim,
draw_quantiles = draw_quantiles, bw = bw,
colour = fill, kernel = kernel, scale = 'width',
width = 0.7, alpha = alpha)
}
df <- table %>% select(-ZeitP, -cylinder_label, -matches('^Zyl'))
# gg_beanplot is as User Defined Function
p <- gg_beanplot(data = df, aes_string(x = 'cylinder_ID', y = 'Ra'), fill = 'grey', trim = F, bw = 'SJ', colour = 'grey', kernel = 'gaussian', alpha = 0.7)
print(p)
gg_beanplot <- function(mapping, data, fill = 'grey', colour = 'grey', alpha = 1,
kernel = 'gaussian', bw = 'SJ', draw_quantiles = NULL,
trim = TRUE, na.rm = FALSE, show.legend = NA) {
x <- as.character(mapping$x)
y <- as.character(mapping$y)
df <- data[, c(x, y)] %>%
group_by_(.dots = c(x, y)) %>%
rename_(.dots = c('x' = x, 'y' = y)) %>%
mutate(count = 0.9 / (1 + exp(log(2) + 1 - n()))) # calculate the width of
# each segment
ggplot() +
geom_violin(data = data, mapping = mapping, fill = fill, trim = trim,
draw_quantiles = draw_quantiles, bw = bw,
colour = fill, kernel = kernel, scale = 'width',
width = 0.7, alpha = alpha) +
geom_segment(data = df, aes(x = match(x, levels(x)) - count/2,
xend = match(x, levels(x)) + count/2,
y = y, yend = y),
col = 'black', size = 0.1)
}
df <- table %>% select(-ZeitP, -cylinder_label, -matches('^Zyl'))
# gg_beanplot is as User Defined Function
p <- gg_beanplot(data = df, aes_string(x = 'cylinder_ID', y = 'Ra'), fill = 'grey', trim = F, bw = 'SJ', colour = 'grey', kernel = 'gaussian', alpha = 0.7)
print(p)
df.agg <- table %>%
select(-ZeitP, -cylinder_label, -date, -month, -matches('^Zyl')) %>%
mutate_(.dots = setNames(lapply(colnames(.[, -1]), . %>% {interp(~normalize.min_max(x), x = as.name(.))}), colnames(.[, -1]))) %>%
group_by(cylinder_ID) %>%
summarise_(.dots = paste0('sd(', colnames(.[, -1]), ')')) %>%
melt(id = 'cylinder_ID')
p <- ggplot(df.agg) +
geom_line(aes(variable, value, group = cylinder_ID, colour = cylinder_ID)) +
geom_segment(data = select(df.agg, variable) %>% unique,
aes(x = match(variable, levels(variable)),
xend = match(variable, levels(variable)),
y = 1, yend = 0), colour = 'black', size = 0.5)
p
input %>% group_by(cylinder_ID) %>% summarise(count = n()) %>% print
library(vegan)
res <- mrpp(input[, -c(1, 2)], as.factor(input$cylinder_ID), distance = 'euclidean', permutations = 5000)
print(res)
# setup for all the R chunks
knitr::opts_knit$set(width = 1000)
knitr::opts_chunk$set(fig.height = 8, fig.width = 12)
# change the workind dir for all the chunks
knitr::opts_knit$set(root.dir = '~/Desktop/PROMIMOOC/BMW/')
library(reshape2)
library(scales)
library(dplyr)
library(lubridate)
library(ggplot2)
theme.my <- theme_grey() +
theme(text = element_text(size = 20),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
plot.title = element_text(hjust = 0.5))
theme_set(theme.my)
# read the data
table <- read.csv('./data/cylinder/flat.csv') %>%
select(-c(Id, Position, MachineDatumId, ProgramNumber660,
Beoeler)) %>%
select(cylinder_ID, cylinder_label, everything()) %>%
mutate(cylinder_ID = as.factor(cylinder_ID)) %>%
mutate(date = lubridate::date(ZeitP)) %>%
mutate(month = factor(months(as.Date(ZeitP)), levels = month.name)) %>%
mutate(ZeitP = as.POSIXct(ZeitP)) %>%
arrange(ZeitP)
unique <- read.csv('./data/cylinder/unique.csv') %>%
mutate(ID = as.factor(ID)) %>%
mutate(label = as.factor(label))
# and count the occurances through days
table %>%
mutate(date = lubridate::date(ZeitP)) %>%
group_by(cylinder_ID) %>%
summarise(cylinder_label = unique(cylinder_label), count = n()) %>%
print
df <- select(unique, -label) %>%
melt(id = 'ID', value.name = 'forces') %>%
mutate(Cylinder = substr(variable, 1, 4)) %>%
mutate(Position = paste('Position', substr(variable, 6, 6))) %>%
select(-variable)
p <- ggplot(df, aes(ID, forces, fill = Cylinder)) +
geom_bar(stat = 'identity') +
facet_wrap(~Position) +
labs(title = 'Unique combinations of cylinder forces') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 10))
p
df.count <- table %>%
mutate(month = factor(months(as.Date(ZeitP)), levels = month.name)) %>%
group_by(cylinder_ID, cylinder_label, month) %>%
summarise(count = n())
p <- ggplot(df.count, aes(cylinder_ID, count)) +
geom_bar(stat = 'identity') +
facet_wrap(~month, scales = 'free') +
labs(title = 'Unique combinations of cylinder forces')
print(p)
plot.cylinder <- function (M) {
df <- table %>%
filter(month == M)
N <- length(unique(df$CoilId))
date_breaks.mine <- function(limit, n = 10) {
interval <- (limit[2] - limit[1]) / n
units(interval) <- 'mins'
interval <- ceiling(as.double(interval))
f <- date_breaks(paste(interval, 'mins'))
f(limit)
}
p <- ggplot(df, aes(ZeitP, cylinder_ID, colour = as.factor(CoilId))) +
geom_point(size = 1) +
facet_wrap(~date, scales = 'free') +
scale_x_datetime(labels = date_format('%H:%M'),
breaks = date_breaks.mine) +
scale_color_manual(name = 'CoilID', values = colorRamps::primary.colors(N)) +
labs(title = 'Unique combinations of cylinder forces')
print(p)
}
plot.cylinder('January')
plot.cylinder('February')
plot.cylinder('April')
plot.cylinder('March')
plot.cylinder('May')
plot.cylinder('June')
plot.cylinder('July')
plot.cylinder('August')
plot.cylinder('September')
df <- table %>% select(-ZeitP, -cylinder_label, -matches('^Zyl'))
# gg_beanplot is as User Defined Function
p <- gg_beanplot(data = df, aes_string(x = 'cylinder_ID', y = 'Ra'), fill = 'grey', trim = F, bw = 'SJ', colour = 'grey', kernel = 'gaussian', alpha = 0.7)
print(p)
library(lazyeval)
normalize.min_max <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
df.agg <- table %>%
select(-ZeitP, -cylinder_label, -date, -month, -matches('^Zyl')) %>%
mutate_(.dots = setNames(lapply(colnames(.[, -1]), . %>% {interp(~normalize.min_max(x), x = as.name(.))}), colnames(.[, -1]))) %>%
group_by(cylinder_ID) %>%
summarise_(.dots = paste0('mean(', colnames(.[, -1]), ')')) %>%
melt(id = 'cylinder_ID')
p <- ggplot(df.agg) +
geom_line(aes(variable, value, group = cylinder_ID, colour = cylinder_ID)) +
geom_segment(data = select(df.agg, variable) %>% unique,
aes(x = match(variable, levels(variable)),
xend = match(variable, levels(variable)),
y = 1, yend = 0), colour = 'black', size = 0.5)
p
df.agg <- table %>%
select(-ZeitP, -cylinder_label, -date, -month, -matches('^Zyl')) %>%
mutate_(.dots = setNames(lapply(colnames(.[, -1]), . %>% {interp(~normalize.min_max(x), x = as.name(.))}), colnames(.[, -1]))) %>%
group_by(cylinder_ID) %>%
summarise_(.dots = paste0('sd(', colnames(.[, -1]), ')')) %>%
melt(id = 'cylinder_ID')
p <- ggplot(df.agg) +
geom_line(aes(variable, value, group = cylinder_ID, colour = cylinder_ID)) +
geom_segment(data = select(df.agg, variable) %>% unique,
aes(x = match(variable, levels(variable)),
xend = match(variable, levels(variable)),
y = 1, yend = 0), colour = 'black', size = 0.5)
p
df <- filter(table, Impoc > 0)
tmp <- df %>%
select(-matches('^Zyl.*'), -month, -cylinder_label, -ZeitP) %>%
group_by(cylinder_ID, date, CoilId) %>%
summarise(n = n()) %>%
dplyr::filter(n >= 20)
input <- df %>%
inner_join(tmp, by = c('cylinder_ID' = 'cylinder_ID', 'date' = 'date', 'CoilId' = 'CoilId')) %>%
select(-matches('^Zyl.*'), -month, -cylinder_label, -ZeitP, -n) %>%
group_by(cylinder_ID, date, CoilId) %>%
summarise_all(c('mean', 'sd')) %>%
select(-CoilId, -date)
data <- unique %>%
select(-matches('^Zyl[1-6]_[2-5]'), -label) %>%
right_join(input, by = c("ID" = "cylinder_ID")) %>%
select(-date)
print(data)
write.csv(x = data, file = './data/cylinder/modelling.csv', row.names = F)
input %>% group_by(cylinder_ID) %>% summarise(count = n()) %>% print
library(vegan)
res <- mrpp(input[, -c(1, 2)], as.factor(input$cylinder_ID), distance = 'euclidean', permutations = 5000)
print(res)
plot.train(1)
cat('\n\n')
plot.test(1)
plot.train(2)
cat('\n\n')
plot.test(2)
plot.train(3)
cat('\n\n')
plot.test(3)
plot.train(4)
cat('\n\n')
plot.test(4)
plot.train(5)
cat('\n\n')
plot.test(5)
?mrpp
plot.train <- function(fold) {
df <- read.csv(paste0('./data/cylinder/fold', fold, '.csv')) %>%
dplyr::filter(is_test == 0) %>%
select(-is_test) %>%
mutate(records = seq(nrow(.))) %>%
melt(id = 'records', value.name = 'forces') %>%
mutate(is_pre = rep(0, nrow(.)))
df$is_pre[grepl('.hat$', df$variable)] <- 1
df$variable <- substr(df$variable, 1, 6)
p <- ggplot(df, aes(records, forces, fill = variable)) +
geom_bar(stat = 'identity') +
facet_wrap(~is_pre) +
labs(title = 'Predictions on the Training data') +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15))
print(p)
}
# ggsave(file.path('~/Dropbox/', paste0('train_fold', fold, '.png')),
#        plot = p, width = 18, height = 10)
plot.test <- function(fold) {
df <- read.csv(paste0('./data/cylinder/fold', fold, '.csv')) %>%
dplyr::filter(is_test == 1) %>%
select(-is_test) %>%
mutate(records = seq(nrow(.))) %>%
melt(id = 'records', value.name = 'forces') %>%
mutate(is_pre = rep(0, nrow(.)))
df$is_pre[grepl('.hat$', df$variable)] <- 1
df$variable <- substr(df$variable, 1, 6)
p <- ggplot(df, aes(records, forces, fill = variable)) +
geom_bar(stat = 'identity') +
facet_wrap(~is_pre) +
labs(title = 'Predictions on the test data') +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15))
print(p)
}
# ggsave(file.path('~/Dropbox/', paste0('test_fold', fold, '.png')),
#        plot = p, width = 18, height = 10)
# setup for all the R chunks
knitr::opts_knit$set(width = 1000)
knitr::opts_chunk$set(fig.height = 8, fig.width = 12)
# change the workind dir for all the chunks
knitr::opts_knit$set(root.dir = '~/Desktop/PROMIMOOC/BMW/')
library(reshape2)
library(scales)
library(dplyr)
library(lubridate)
library(ggplot2)
theme.my <- theme_grey() +
theme(text = element_text(size = 20),
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
plot.title = element_text(hjust = 0.5))
theme_set(theme.my)
# read the data
table <- read.csv('./data/cylinder/flat.csv') %>%
select(-c(Id, Position, MachineDatumId, ProgramNumber660,
Beoeler)) %>%
select(cylinder_ID, cylinder_label, everything()) %>%
mutate(cylinder_ID = as.factor(cylinder_ID)) %>%
mutate(date = lubridate::date(ZeitP)) %>%
mutate(month = factor(months(as.Date(ZeitP)), levels = month.name)) %>%
mutate(ZeitP = as.POSIXct(ZeitP)) %>%
arrange(ZeitP)
unique <- read.csv('./data/cylinder/unique.csv') %>%
mutate(ID = as.factor(ID)) %>%
mutate(label = as.factor(label))
# and count the occurances through days
table %>%
mutate(date = lubridate::date(ZeitP)) %>%
group_by(cylinder_ID) %>%
summarise(cylinder_label = unique(cylinder_label), count = n()) %>%
print
df <- select(unique, -label) %>%
melt(id = 'ID', value.name = 'forces') %>%
mutate(Cylinder = substr(variable, 1, 4)) %>%
mutate(Position = paste('Position', substr(variable, 6, 6))) %>%
select(-variable)
p <- ggplot(df, aes(ID, forces, fill = Cylinder)) +
geom_bar(stat = 'identity') +
facet_wrap(~Position) +
labs(title = 'Unique combinations of cylinder forces') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 10))
p
df.count <- table %>%
mutate(month = factor(months(as.Date(ZeitP)), levels = month.name)) %>%
group_by(cylinder_ID, cylinder_label, month) %>%
summarise(count = n())
p <- ggplot(df.count, aes(cylinder_ID, count)) +
geom_bar(stat = 'identity') +
facet_wrap(~month, scales = 'free') +
labs(title = 'Unique combinations of cylinder forces')
print(p)
plot.cylinder <- function (M) {
df <- table %>%
filter(month == M)
N <- length(unique(df$CoilId))
date_breaks.mine <- function(limit, n = 10) {
interval <- (limit[2] - limit[1]) / n
units(interval) <- 'mins'
interval <- ceiling(as.double(interval))
f <- date_breaks(paste(interval, 'mins'))
f(limit)
}
p <- ggplot(df, aes(ZeitP, cylinder_ID, colour = as.factor(CoilId))) +
geom_point(size = 1) +
facet_wrap(~date, scales = 'free') +
scale_x_datetime(labels = date_format('%H:%M'),
breaks = date_breaks.mine) +
scale_color_manual(name = 'CoilID', values = colorRamps::primary.colors(N)) +
labs(title = 'Unique combinations of cylinder forces')
print(p)
}
plot.cylinder('January')
plot.cylinder('February')
plot.cylinder('April')
plot.cylinder('March')
plot.cylinder('May')
plot.cylinder('June')
plot.cylinder('July')
plot.cylinder('August')
plot.cylinder('September')
df <- table %>% select(-ZeitP, -cylinder_label, -matches('^Zyl'))
# gg_beanplot is as User Defined Function
p <- gg_beanplot(data = df, aes_string(x = 'cylinder_ID', y = 'Ra'), fill = 'grey', trim = F, bw = 'SJ', colour = 'grey', kernel = 'gaussian', alpha = 0.7)
print(p)
library(lazyeval)
normalize.min_max <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
df.agg <- table %>%
select(-ZeitP, -cylinder_label, -date, -month, -matches('^Zyl')) %>%
mutate_(.dots = setNames(lapply(colnames(.[, -1]), . %>% {interp(~normalize.min_max(x), x = as.name(.))}), colnames(.[, -1]))) %>%
group_by(cylinder_ID) %>%
summarise_(.dots = paste0('mean(', colnames(.[, -1]), ')')) %>%
melt(id = 'cylinder_ID')
p <- ggplot(df.agg) +
geom_line(aes(variable, value, group = cylinder_ID, colour = cylinder_ID)) +
geom_segment(data = select(df.agg, variable) %>% unique,
aes(x = match(variable, levels(variable)),
xend = match(variable, levels(variable)),
y = 1, yend = 0), colour = 'black', size = 0.5)
p
df.agg <- table %>%
select(-ZeitP, -cylinder_label, -date, -month, -matches('^Zyl')) %>%
mutate_(.dots = setNames(lapply(colnames(.[, -1]), . %>% {interp(~normalize.min_max(x), x = as.name(.))}), colnames(.[, -1]))) %>%
group_by(cylinder_ID) %>%
summarise_(.dots = paste0('sd(', colnames(.[, -1]), ')')) %>%
melt(id = 'cylinder_ID')
p <- ggplot(df.agg) +
geom_line(aes(variable, value, group = cylinder_ID, colour = cylinder_ID)) +
geom_segment(data = select(df.agg, variable) %>% unique,
aes(x = match(variable, levels(variable)),
xend = match(variable, levels(variable)),
y = 1, yend = 0), colour = 'black', size = 0.5)
p
df <- filter(table, Impoc > 0)
tmp <- df %>%
select(-matches('^Zyl.*'), -month, -cylinder_label, -ZeitP) %>%
group_by(cylinder_ID, date, CoilId) %>%
summarise(n = n()) %>%
dplyr::filter(n >= 20)
input <- df %>%
inner_join(tmp, by = c('cylinder_ID' = 'cylinder_ID', 'date' = 'date', 'CoilId' = 'CoilId')) %>%
select(-matches('^Zyl.*'), -month, -cylinder_label, -ZeitP, -n) %>%
group_by(cylinder_ID, date, CoilId) %>%
summarise_all(c('mean', 'sd')) %>%
select(-CoilId, -date)
data <- unique %>%
select(-matches('^Zyl[1-6]_[2-5]'), -label) %>%
right_join(input, by = c("ID" = "cylinder_ID")) %>%
select(-date)
print(data)
write.csv(x = data, file = './data/cylinder/modelling.csv', row.names = F)
input %>% group_by(cylinder_ID) %>% summarise(count = n()) %>% print
library(vegan)
res <- mrpp(input[, -c(1, 2)], as.factor(input$cylinder_ID), distance = 'euclidean', permutations = 5000)
print(res)
plot.train(1)
cat('\n\n')
plot.test(1)
plot.train(2)
cat('\n\n')
plot.test(2)
plot.train(3)
cat('\n\n')
plot.test(3)
plot.train(4)
cat('\n\n')
plot.test(4)
df <- select(unique, -label) %>%
melt(id = 'ID', value.name = 'forces') %>%
mutate(Cylinder = substr(variable, 1, 4)) %>%
mutate(Position = paste('Position', substr(variable, 6, 6))) %>%
select(-variable)
p <- ggplot(df, aes(ID, forces, fill = Cylinder)) +
geom_bar(stat = 'identity') +
facet_wrap(~Position) +
labs(title = 'Unique combinations of cylinder forces') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 10))
p
df <- select(unique, -label) %>%
melt(id = 'ID', value.name = 'forces') %>%
mutate(Cylinder = substr(variable, 1, 4)) %>%
mutate(Position = paste('Position', substr(variable, 6, 6))) %>%
select(-variable)
p <- ggplot(df, aes(ID, forces, fill = Cylinder)) +
geom_bar(stat = 'identity') +
facet_wrap(~Position) +
labs(title = 'Unique combinations of cylinder forces') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 10))
p
gg_beanplot <- function(mapping, data, fill = 'grey', colour = 'grey', alpha = 1,
kernel = 'gaussian', bw = 'SJ', draw_quantiles = NULL,
trim = TRUE, na.rm = FALSE, show.legend = NA) {
x <- as.character(mapping$x)
y <- as.character(mapping$y)
df <- data[, c(x, y)] %>%
group_by_(.dots = c(x, y)) %>%
rename_(.dots = c('x' = x, 'y' = y)) %>%
mutate(count = 0.9 / (1 + exp(log(2) + 1 - n()))) # calculate the width of
# each segment
ggplot() +
geom_violin(data = data, mapping = mapping, fill = fill, trim = trim,
draw_quantiles = draw_quantiles, bw = bw,
colour = fill, kernel = kernel, scale = 'width',
width = 0.7, alpha = alpha) +
geom_segment(data = df, aes(x = match(x, levels(x)) - count/2,
xend = match(x, levels(x)) + count/2,
y = y, yend = y),
col = 'black', size = 0.1)
}
install.packages('magrittr')
install.packages("magrittr")
install.packages("RPostgreSQL")
install.packages('rmarkdown')
install.packages('magrittr')
install.packages("magrittr")
library(RPostgreSQL)
library(magrittr)
library(ggplot2)
library(dplyr)
install.packages("RPostgreSQL")
install.packages("ggpplot2")
install.packages("ggplot2")
install.packages("reshape2")
install.packages("shiny")
clear
ls
setwd('~/Dropbox/code_base/Configurator/')
df <- read.csv('./data/2D-10N-himmelblau.csv')
df
df <- read.csv(file) %>% mutate(step = nrow(.))
df  %>% mutate(step = nrow(.))
library(dplyr)
df  %>% mutate(step = nrow(.))
df  %>% mutate(step = seq(nrow(.)))
df  %>% mutate(step = seq(nrow(.))) %>% melt(id = 'step')
library(reshape2)
df  %>% mutate(step = seq(nrow(.))) %>% melt(id = 'step')
df %>%  melt()
a <- df %>%  melt()
head(a)
source('~/Dropbox/code_base/EGO_python/plot_convergence.R')
source('~/Dropbox/code_base/EGO_python/plot_convergence.R')
ls
ll
source('~/Dropbox/code_base/EGO_python/plot_convergence.R')
source('~/Dropbox/code_base/EGO_python/plot_convergence.R')
matrix(rnorm(15), 3, 5)
colMeans(matrix(rnorm(15), 3, 5))
df
df <- read.csv('./data/2D-10N-himmelblau.csv')
df
rowMeans(df)
source('~/Dropbox/code_base/EGO_python/plot_convergence.R')
df.melt
head(df.melt)
source('~/Dropbox/code_base/EGO_python/plot_convergence.R')
source('~/Dropbox/code_base/EGO_python/plot_convergence.R')
source('~/Dropbox/code_base/EGO_python/plot_convergence.R')
source('~/Dropbox/code_base/EGO_python/plot_convergence.R')
